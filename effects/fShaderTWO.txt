#version 330 core
out vec4 FragColor;

in vec4 ourColor;
in vec2 texCoord;
in vec3 Normal;
in vec3 FragPos;  

uniform vec3 lightPosition; 
uniform vec3 lightDiffuse;
uniform vec3 lightAmbient;
uniform sampler2D ourTexture;

void main()
{
    // ambient
    vec3 ambient = lightAmbient;
  	
    // diffuse calculation

    vec3 norm = normalize(Normal);

    //calc light direction source -> fragment position
    vec3 lightDir = normalize(lightPosition - FragPos);

    //angle between normal and light direction
    float angle = max(dot(norm, lightDir), 0.0);

    vec3 diffuse = angle * lightDiffuse;
            
    vec3 result = (ambient + diffuse) * vec3(ourColor.r, ourColor.g, ourColor.b);
    FragColor = vec4(result, 1.0) * texture(ourTexture, texCoord);
}
